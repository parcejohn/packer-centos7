# ks.cfg
# This is the kickstart file for the RHEL6(x86_64)  vanilla installation
# Also includes Vagrant pre-requisites

install
cdrom
text
lang en_US.UTF-8
keyboard us
network --onboot yes --device eth0 --bootproto dhcp --noipv6
rootpw  --iscrypted $6$AcDUiCtc$ZfE9iCSvnezqs3/t47dcPRxozcWACkdITx38T.oTMESLzVv8yjSm1pVE4JC5FmdGojpg8StRhfi.peduTEtzn1
firewall --disabled
authconfig --enableshadow --passalgo=sha512
selinux --disabled
timezone --utc America/New_York
bootloader --location=mbr --driveorder=sda --append="crashkernel=auto"
zerombr
clearpart --initlabel --drives=sda --all
#clearpart --initlabel
part /boot --fstype=ext4 --size=500
part pv.100 --grow --size=1
volgroup vg0 --pesize=4096 pv.100
logvol swap --name=lv_swap --vgname=vg0 --size=2048
logvol / --fstype=ext4 --name=lv_root --vgname=vg0 --grow --size=1024
poweroff

## Install needed software
repo  --name=CPG-RHEL6-PROD-Repository --baseurl=http://ny1gdeployp2.cpg.org/pub/repos/cpg-rhel6-prod
repo  --name=vmware-tools-collection   --baseurl=http://packages.vmware.com/tools/esx/5.5p04/rhel6/x86_64

%packages --nobase
@core
vmware-tools-hgfs
vmware-tools-esx-nox
pe-agent
perl
openssh-clients
%end

%post

############################### BEGIN script definitions

### These utility scripts are needed during our template building
### process.

### Since they are needed prior to Satellite binding, we can't supply
### them via RPMs, so we put them in the kickstart instead.

### The master copy of these scripts is in the "cpg-template-utils"
### RPM.  When that RPM is installed, these will be overwritten and
### then receive any future updates via that RPM.

### Any other utility scripts needed by the template building process
### should be supplied by that RPM or other RPMs, as appropriate.

### (So, please don't add any more scripts here unless they are needed
### in template building steps prior to the installation of
### cpg-template-utils.)

############################### bind_to_static_repos

mkdir -p             /usr/local/sbin
chmod -R ugo+rX,go-w /usr/local/sbin
chown -R root:root   /usr/local/sbin
touch                /usr/local/sbin/bind_to_static_repos
chmod    ugo+rx,go-w /usr/local/sbin/bind_to_static_repos
chown    root:root   /usr/local/sbin/bind_to_static_repos
cat >                /usr/local/sbin/bind_to_static_repos <<'END_OF_SCRIPT'
#!/bin/bash -e
# Emacs: -*- tab-width: 4; -*- vi: tabstop=4
SCRIPTDIR="$(cd "$(dirname $BASH_SOURCE)"; pwd)"

usage () { echo "Usage:"; cat <<usage;

    bind_to_static_repos [HQ|NJ] [prod|test|dev]

    Tell this host to get its RPMs from our "static" RPM mirrors.

    NOTE: The alternative is to get RPMs directly from the Satellite
    servers, but that option should be rarely used (see
    bind_to_satellite the in cpg-template-utils package) if that
    option is needed.

    Calls "unbind" scripts first so we don't get bound to both static
    and satellite environments by mistake.

    To manually unbind without rebinding, run this command:

        unbind_from_static_repos

usage
exit;
}

# If not root, re-exec using sudo
if [[ $EUID -ne 0 ]]; then set -x; exec sudo "$0" "$@"; fi

# Stop this script if user hits Control-C
trap "kill 0" SIGINT

# First arg starting with - prints usage
if [[ "$1" =~ ^- ]]; then usage; fi;

# Read and validate command line args (first prompting if not provided)
if [[   "$host_name" =~ ^ny      ]]; then default_loc="HQ"; else default_loc="NJ"; fi
whichsat=${1:-"$(read -p "Which Location? (HQ or NJ): " -e -i "$default_loc" reply; echo "$reply")"}; shift || true
if [[ ! "$whichsat" =~ ^(HQ|NJ)$ ]]; then usage; fi;

tier=${1:-"$(read -p "Which tier? (prod, test, dev): " -e -i "" reply; echo "$reply")"}; shift || true
if [[ ! "$tier" =~ ^(prod|test|dev)$ ]]; then usage; fi;

# Get the bootstrap script
case "$whichsat" in
    HQ ) server=ny1gdeployp2.cpg.org;;
    NJ ) server=nj1gdeployp2.cpg.org;;
esac
script="bootstrap_$tier.sh"
URL="http://$server/bootstrap/$script"      ## e.g. http://nj1gdeployp2.cpg.org/bootstrap/bootstrap_prod.sh
echo "Getting bootstrap script: $URL";

curl -f -s "$URL"       > "/root/$whichsat-static-$script"
if [[ $? != 0 ]]; then echo "Failed to download.  Did you remember to bring up the network?  Aborting."; exit 1; fi
chmod 755                 "/root/$whichsat-static-$script"

# First undo any prior binding.  Tolerate absence of these scripts (e.g. at template building time)

"$SCRIPTDIR"/unbind_from_static_repos   >/dev/null 2>&1 || true
"$SCRIPTDIR"/unbind_from_satellite      >/dev/null 2>&1 || true

# Run  the bootstrap

cd /root/       # bootstrap leaves junk around; might as well put that in /root/
echo              "Running /root/$whichsat-static-$script ..."
/bin/bash                 "/root/$whichsat-static-$script"

# Print a repolist just to confirm
yum repolist -v

END_OF_SCRIPT

############################### unbind_from_static_repos

mkdir -p             /usr/local/sbin
chmod -R ugo+rX,go-w /usr/local/sbin
chown -R root:root   /usr/local/sbin
touch                /usr/local/sbin/unbind_from_static_repos
chmod    ugo+rx,go-w /usr/local/sbin/unbind_from_static_repos
chown    root:root   /usr/local/sbin/unbind_from_static_repos
cat >                /usr/local/sbin/unbind_from_static_repos <<'END_OF_SCRIPT'
#!/bin/bash -e
# Emacs: -*- tab-width: 4; -*- vi: tabstop=4
SCRIPTDIR="$(readlink -f "$(dirname "$0")")"

usage () { echo "Usage:"; cat <<usage;

    unbind_from_static_repos

    Undoes whatever was done by bind_to_static_repos.

    In particular:

    rm -f /etc/yum.repos.d/CPG-RHEL6-*
    rm -f /etc/yum.repos.d/RHEL6-*

usage
exit;
}

# If not root, re-exec using sudo
if [[ $EUID -ne 0 ]]; then set -x; exec sudo "$0" "$@"; fi

# Stop this script if user hits Control-C
trap "kill 0" SIGINT

# First arg starting with - prints usage
if [[ "$1" =~ ^- ]]; then usage; fi;

rm -f /etc/yum.repos.d/CPG-RHEL6-*  || true
rm -f /etc/yum.repos.d/RHEL6-*      || true
END_OF_SCRIPT

############################### bind_to_vmware_tools_repo

mkdir -p             /usr/local/sbin
chmod -R ugo+rX,go-w /usr/local/sbin
chown -R root:root   /usr/local/sbin
touch                /usr/local/sbin/bind_to_vmware_tools_repo
chmod    ugo+rx,go-w /usr/local/sbin/bind_to_vmware_tools_repo
chown    root:root   /usr/local/sbin/bind_to_vmware_tools_repo
cat >                /usr/local/sbin/bind_to_vmware_tools_repo <<'END_OF_SCRIPT'
#!/bin/bash -e
# Emacs: -*- tab-width: 4; -*- vi: tabstop=4
SCRIPTDIR="$(cd "$(dirname $BASH_SOURCE)"; pwd)"

usage () { echo "Usage:"; cat <<usage;

    bind_to_vmware_toools_repo

    Connects the current host to the official VMWare tools repo
    ("vmware-tools-collection").

    After this, VMWare tools such as vmware-tools-esx-nox can be
    installed using yum.

usage
}

# If not root, re-exec using sudo
if [[ $EUID -ne 0 ]]; then set -x; exec sudo "$0" "$@"; fi

# Stop this script if user hits Control-C
trap "kill 0" SIGINT

# Bind to the repo by using a repo-binding RPM created by VMWare.

REPOLISTPAGE="http://packages.vmware.com/tools/esx/5.5p04/repos/index.html"
LATESTRPMNAME="$(set +e; curl -s "$REPOLISTPAGE" | grep vmware-tools-repo-RHEL6 | grep x86_64.rpm | perl -ne 'print "$1\n" if m{(vmware-tools[^\"]+.rpm)}')"
if [[ ! "$LATESTRPMNAME" ]]; then 
    echo "FAILURE: Approprite RPM not found at $REPOLISTPAGE. Exiting." 1>&2; exit 1;
fi

echo -e "Removing prior binding (if any)"

yum remove -y vmware-tools-repo-RHEL6 >/dev/null 2>&1 || true

URL="$REPOLISTPAGE/$LATESTRPMNAME"

echo -e "Retrieving and installing repo binding RPM from:\n\t$URL ...\n"

rpm -Uvh "$URL" || true

echo
echo -e "Success.  Listing of available packages:\n"

sudo yum list installed 2>/dev/null | egrep '^vmware-tools-' | awk '{print $1}' | column

END_OF_SCRIPT

############################### END of script definitions

############################### BEGIN post-kickstart actions

# Assume we will be building the next VM in an environment with DHCP
# enabled, by setting udev to not persistently store the network config.
# See: https://www.kernel.org/pub/linux/utils/kernel/hotplug/udev/udev.html
/bin/rm -f /etc/udev/rules.d/70-persistent-net.rules
/bin/ln -s /dev/null /etc/udev/rules.d/70-persistent-net.rules
/bin/rm -rf /dev/.udev/
/bin/rm /lib/udev/rules.d/75-persistent-net-generator.rules

# Clean hardcoded MAC address
/bin/sed -i -e 's/^HWADDR=.*$//' -e 's/^UUID=.*$//' /etc/sysconfig/network-scripts/ifcfg-eth0

# Make boot verbose
/bin/sed -i -e 's/^splash/#splash/' -e 's/^hidden/#hidden/' -e 's/rhgb//' -e 's/quiet//' /boot/grub/grub.conf

# Remove screensaver/blank screen 
/bin/sed -i -r s/"(^[\t]*kernel.*)"/"\1 consoleblank=0"/ /boot/grub/grub.conf 

# Dont start Puppet automatically
service pe-puppet stop
chkconfig pe-puppet off

### BEGIN: Vagrant specific pre-requisites ###
# Enable vmhgfs
/bin/echo "modprobe vmhgfs" > /etc/sysconfig/modules/vmhgfs.modules
/bin/chmod +x /etc/sysconfig/modules/vmhgfs.modules

# Create vagrant user
/usr/sbin/useradd vagrant
/bin/mkdir /home/vagrant/.ssh
/bin/chmod 700 /home/vagrant/.ssh
cat >           /home/vagrant/.ssh/authorized_keys <<'VAGRANT_RSA'
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC67BAK8lKHpqgM3XKQ/V0sJU+NTPS6W5fZq0zUh0+riQubgmoZO46kJ2gZQy4F9IAUq0HI/GgM7fqndr7wwXxg1iGNarfVq946IXXNPXGBO2y+YWpKTCOFUdciuUnEoiIPCUgiWnq9fNWLuCo68OnIToveoNMFfP4VjCXn5BtEdbWiFtCbC1mC6Wdwai3VZ4L4RE4tE9APaHWcjM4ExgsJNq96EZd6WSLKp+nLoLmILtTKtSuY9xkPz4woVTvzA3nh2EX0U/ljPfZ+LGah1A51Q/nbj+H+DDNax1a4cqGCrLzgb+glejGdIXC8YxxkfikZXwwomSU90VERNTG5qr3B vagrant
VAGRANT_RSA

/bin/chmod 600 /home/vagrant/.ssh/authorized_keys
/bin/chown -R vagrant /home/vagrant/.ssh

## Allow vagrant user to sudo
/bin/sed -i -e 's/Defaults[[:space:]]*requiretty/###Allow vagrant user to sudo\nvagrant ALL=(ALL:ALL) NOPASSWD:ALL\nDefaults requiretty\nDefaults:vagrant !requiretty/' /etc/sudoers 
### END: Vagrant specific pre-requisites ###

# Clean yum stuff to make resulting machine leaner
yum clean all

############################### END post-kickstart actions

%end
